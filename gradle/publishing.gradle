import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse.BodyHandlers

import static java.lang.System.getenv

final HttpClient client = HttpClient.newBuilder().build()

ext {
    snapshot = project.version.endsWith('SNAPSHOT')

    canSign = getenv().containsKey('GPG_KEYNAME') && getenv().containsKey('GPG_PASSPHRASE')
    canPublishToSpace = getenv().containsKey('SPACE_PASSWORD') && getenv().containsKey('SPACE_USERNAME')
    canPublishToSonatype = canSign && getenv().containsKey('SONATYPE_PASSWORD') && getenv().containsKey('SONATYPE_USERNAME')
    canPublishToGitHub = !snapshot && canSign && getenv().containsKey('GITHUB_PASSWORD') && getenv().containsKey('GITHUB_USERNAME')
}

if (canSign) {
    ext.'signing.gnupg.keyName' = getenv('GPG_KEYNAME')
    ext.'signing.gnupg.passphrase' = getenv('GPG_PASSPHRASE')
}

if (canPublishToSpace) {
    ext {
        spaceUsername = getenv('SPACE_USERNAME')
        spacePassword = getenv('SPACE_PASSWORD')
    }
}

if (canPublishToSonatype) {
    ext {
        sonatypeUsername = getenv('SONATYPE_USERNAME')
        sonatypePassword = getenv('SONATYPE_PASSWORD')
    }
}

if (canPublishToGitHub) {
    ext {
        githubRegistryUrl = uri("https://maven.pkg.github.com/${userbase.toLowerCase()}/${rootProject.name.toLowerCase()}")
        githubUsername = getenv('GITHUB_USERNAME')
        githubPassword = getenv('GITHUB_PASSWORD')
    }
}

apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()

        if (canPublishToSpace) {
            maven {
                name = 'Space'
                url = snapshot
                        ? 'https://maven.jetbrains.space/comroid/snapshot'
                        : 'https://maven.jetbrains.space/comroid/release'

                credentials {
                    username spaceUsername
                    password spacePassword
                }
            }
        }

        if (canPublishToSonatype) {
            maven {
                name = 'Sonatype'
                url = snapshot
                        ? 'https://oss.sonatype.org/content/repositories/snapshots'
                        : 'https://oss.sonatype.org/service/local/staging/deploy/maven2'

                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }

        if (canPublishToGitHub) {
            maven {
                name = "GitHubPackages"
                url = githubRegistryUrl

                credentials {
                    username githubUsername
                    password githubPassword
                }
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = artifactName
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = rootProject.name
                description = project.projectDescription
                inceptionYear = '2020'
                url = "https://github.com/$userbase/$rootProject.name".toString()

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'kaleidox'
                        name = 'Tobias Burdow'
                        email = 'contact@comroid.org'
                    }
                }

                scm {
                    connection = "scm:git:git://github.com/$userbase/${rootProject.name}.git".toString()
                    developerConnection = "scm:git:ssh://github.com/$userbase/${rootProject.name}.git".toString()
                    url = "https://github.com/$userbase/$rootProject.name".toString()
                }
            }

            System.out.println("Registered artifact publication: '${group}:${artifactId}:${project.version}' -> $project.projectDescription")
        }
    }
}

def artifactId = publishing.publications.mavenJava.artifactId

// block sonatype release if exists
tasks.findByName('publishMavenJavaPublicationToSonatypeRepository')?.onlyIf {
    if (snapshot) return true

    def uri = new URI(String.format("https://oss.sonatype.org/content/repositories/releases/%s/%s/%s/%s",
            rootProject.group.toString().replace(".", "/"), // domain
            artifactId,
            project.version,
            String.format("%s-%s.pom", artifactId, project.version)
    ))
    def response = client.send(HttpRequest.newBuilder(uri).GET().build(), BodyHandlers.ofString())
    def code = response.statusCode()

    System.out.printf("Checked for existing Sonatype Artifact: %s RETURNED %d\n", uri, code)

    return code != 200
}
// block github release if exists
tasks.findByName('publishMavenJavaPublicationToGitHubPackagesRepository')?.onlyIf {
    if (snapshot) return false

    def uri = new URI("https://$githubUsername:$githubPassword@maven.pkg.github.com/$userbase" +
            "/${rootProject.name.replace('.', '/')}/${rootProject.group.replace('.', '/')}" +
            "/$artifactId/$project.version/$artifactId-$project.version.jar")
    def response = client.send(HttpRequest.newBuilder(uri).GET()
            .header("Authorization", "$githubUsername:$githubPassword")
            .build(), BodyHandlers.ofString())
    def code = response.statusCode()

    System.out.printf("Checked for existing GitHubPackages Artifact: %s RETURNED %d\n", uri, code)

    return code != 200
}

task generateGithubPom(type: GenerateMavenPom) {
    destination = file("$projectDir/pom.xml")
    pom = publishing.publications.mavenJava.pom
}

if (canSign) {
    apply plugin: 'signing'

    signing {
        useGpgCmd()
        sign publishing.publications.mavenJava
    }
}
